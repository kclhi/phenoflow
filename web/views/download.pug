extends layout

mixin createStep(position, name, doc, type, inputDoc, outputDoc, outputExtension, implementations, children)
  div(id="step" + position, style="text-align: center;")
    div(class="row")
      div(class="col")
        span(class="col highlight")
          | Input
        | #{inputDoc}
        div(class="highlight arrow") &#8675;
    div(class="row")
      div(class="col highlight")
        | Step
    div(class="row step")
      div(class="box col")
        div(style="padding-top: 20px;")
          div
            +conceptIcon(type)
          div(class="name")
            | '#{name}'
          div
            | #{doc}
      div(class="col-1")
      div(class="box col")
        div(style="padding-top: 20px;")
          if(implementations[0].language)
            | Select implementation:
            div
              select(class="implementation", placeholder="about", onchange="updateImplementationUnits()")
                each implementation in implementations
                  option(value=implementation.language) #{implementation.language}
            div
              a(onclick="showImplementation(" + workflow.id + "," + position + ")" class="a-button")
                | VIEW
          else
            div(class="d-flex align-items-center justify-content-center")
              a(onclick="showSub(" + implementations[0].fileName + ")" class="a-button")
                | VIEW BRANCH
    if children
      div(class="row")
        | Switch to:&nbsp;
        each child in children
          a(href="/phenoflow/phenotype/download/" + child.workflowId)
            | #{child.stepName}
          if children.indexOf(child) != children.length-1
            | ,&nbsp;
          else
            | .
    div(class="row")
      div(class="col")
        div(class="highlight arrow") &#8675;
        span(class="col highlight")
          | Output
        | #{outputDoc}
        | (#{outputExtension})

block pageJS
  script.
    ready(function(event) {
      let params = getParams();
      if(!params||!params.parent) {
        localStorage.removeItem("downloadLink");
        localStorage.removeItem(getImplementationUnitsStorageId());
      }
    });
    function getLink(action) {
      let params = getParams();
      return (params&&params.parent?"/phenoflow/phenotype/"+action+"/"+params.parent:"/phenoflow/phenotype/"+action+"/#{workflow.id}");
    }
    function getDownloadLink() { return getLink("generate"); }
    function getCiteLink() { return getLink("cite"); }
    function getParams() {
      const urlSearchParams = new URLSearchParams(window.location.search);
      return Object.fromEntries(urlSearchParams.entries());
    }
    function getImplementationUnitsStorageId() {
      let params = getParams();
      return (params&&params.parent?params.parent:#{workflow.id})+"implementationUnits";
    }
    function updateImplementationUnits() {
      let implementationUnits = {};
      for (let step of document.getElementsByClassName("step")) {
        if(step.getElementsByClassName("implementation")&&step.getElementsByClassName("implementation")[0]&&step.getElementsByClassName("implementation")[0].value) implementationUnits[step.getElementsByClassName("name")[0].innerText.replace(/\'/g, "")] = step.getElementsByClassName("implementation")[0].value;
      }
      let implementationUnitsStorageId = getImplementationUnitsStorageId();
      localStorage.setItem(implementationUnitsStorageId, JSON.stringify(Object.assign({}, localStorage.getItem(implementationUnitsStorageId)?JSON.parse(localStorage.getItem(implementationUnitsStorageId)):{}, implementationUnits)));
    }
    function sendImplementation(link, callback=function(response){}, responseType="blob") {
      updateImplementationUnits();
      let implementationUnits = JSON.parse(localStorage.getItem(getImplementationUnitsStorageId()));
      var xhr = new XMLHttpRequest();
      xhr.open("POST", link, true);
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.responseType = responseType;
      xhr.onload = function(event) {
        var blob = this.response;
        var contentDispo = this.getResponseHeader("Content-Disposition");
        if (contentDispo) {
          var fileName = contentDispo.match(/filename\*?=['"]?(?:UTF-\d['"]*)?([^;\r\n"']*)['"]?;?/)[1];
          var a = document.createElement("a");
          a.href = window.URL.createObjectURL(blob);
          a.download = fileName;
          a.dispatchEvent(new MouseEvent("click"));
        }
        callback(this.response);
      }
      xhr.send(JSON.stringify({"implementationUnits":implementationUnits, "userName":"!{userName}"}));
    }
    function downloadWorkflow() {
      document.getElementById("download").style.display = "none";
      document.getElementById("downloadSpinner").removeAttribute("style")
      sendImplementation(getDownloadLink(), function(response) { 
        document.getElementById("download").removeAttribute("style");
        document.getElementById("downloadSpinner").style.display = "none";
      });
    }
    function getReference() {
      document.getElementById("cite").style.display = "none";
      document.getElementById("downloadSpinnerDOI").removeAttribute("style")
      sendImplementation(getCiteLink(), function(response) {
        document.getElementById("downloadSpinnerDOI").style.display = "none";
        document.getElementById("doi").removeAttribute("style");
        document.querySelector("span[id='doi'] a").href="https://doi.org/"+response;
        document.querySelector("span[id='doi'] span").innerHTML="DOI "+response;
      }, "text");
    }
    function showImplementation(workflowId, position) {
      const language = document.getElementById("step" + position).getElementsByClassName("implementation")[0].value;
      window.open("/phenoflow/implementation/"+workflowId+"/"+position+"/"+language);
    }
    function showSub(workflowId) {
      updateImplementationUnits();
      window.open("/phenoflow/phenotype/download/"+workflowId+"?parent=#{workflow.id}");
    }

block header
  div
    span #{workflow&&workflow.about?workflow.about:""}&nbsp;
    a(id="download" class="a-button" onclick="downloadWorkflow(); return false;")
      | #{download}
    span(id="downloadSpinner" class="spinner-border text-info" role="status" style="display:none;")
      span(class="sr-only") Loading...
    if doi
      span
        | | 
      span(id="doi" style="display:none;")
      a(href="https://doi.org/"+doi)
        span() DOI #{doi}
    else if !doi && !restricted
      span
        | | 
      a(id="cite" class="a-button" onclick="getReference(); return false;")
        | Get DOI
      span(id="downloadSpinnerDOI" class="spinner-border text-info" role="status" style="display:none;")
        span(class="sr-only") Loading...
      span(id="doi" style="display:none;")
        a(href="")
          span()

block content

  div(class="container")
    div(style="padding-top:10px;")
      div(style="text-align: right;")
        | !{userName}
        if verified == true
          a(href=homepage)
            img(src="/phenoflow/images/verified.png" width=30)
      div(id="steps")
        if workflow && workflow.steps && workflow.steps[0]
          each step in workflow.steps
            +createStep(step.position?step.position:"", step.name?step.name:"", step.doc?step.doc:"", step.type?step.type:"", step.inputs[0]&&step.inputs[0].doc?step.inputs[0].doc:"", step.outputs[0]&&step.outputs[0].doc?step.outputs[0].doc:"", step.outputs[0]&&step.outputs[0].extension?step.outputs[0].extension:"", step.implementations, step.children?step.children:"")
        else
          +createStep(1, "", "", "", "", "", "", "", "", "")
